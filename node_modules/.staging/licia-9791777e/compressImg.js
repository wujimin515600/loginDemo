var isFn = require('./isFn');
var loadImg = require('./loadImg');
var noop = require('./noop');
var defaults = require('./defaults');
var createUrl = require('./createUrl');
var isStr = require('./isStr');

exports = function(file, opts, cb) {
    if (isFn(opts)) {
        cb = opts;
        opts = {};
    }

    cb = cb || noop;
    opts = opts || {};
    defaults(opts, defOpts);
    opts.mimeType = opts.mimeType || file.type;

    if (isStr(file)) {
        opts.isUrl = true;
    } else {
        file = createUrl(file);
    }

    loadImg(file, function(err, img) {
        if (err) return cb(err);
        compress(img, opts, cb);
    });
};

function compress(img, opts, cb) {
    var canvas = document.createElement('canvas');
    var ctx = canvas.getContext('2d');
    var width = img.width;
    var height = img.height;
    var ratio = width / height;
    var maxWidth = opts.maxWidth;
    var maxHeight = opts.maxHeight;

    if (opts.width || opts.height) {
        if (opts.width) {
            width = opts.width;
            height = width / ratio;
        } else if (opts.height) {
            height = opts.height;
            width = height * ratio;
        }
    } else {
        if (width > maxWidth) {
            width = maxWidth;
            height = width / ratio;
        }

        if (height > maxHeight) {
            height = maxHeight;
            width = height * ratio;
        }
    }

    width = floor(width);
    height = floor(height);
    canvas.width = width;
    canvas.height = height;
    ctx.drawImage(img, 0, 0, width, height);
    if (URL && opts.isUrl) URL.revokeObjectURL(img.src);

    if (canvas.toBlob) {
        try {
            canvas.toBlob(
                function(file) {
                    cb(null, file);
                },
                opts.mimeType,
                opts.quality
            );
        } catch (e) {
            cb(e);
        }
    } else {
        cb(new Error('Canvas toBlob is not supported'));
    }
}

var defOpts = {
    maxWidth: Infinity,
    maxHeight: Infinity,
    quality: 0.8
};
var floor = Math.floor;

module.exports = exports;
